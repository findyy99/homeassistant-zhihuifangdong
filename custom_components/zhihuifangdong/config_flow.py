"""Config flow for the Zhihuifangdong Apartment integration."""
from __future__ import annotations

import logging
from typing import Any

import voluptuous as vol

from homeassistant.config_entries import ConfigFlow, ConfigFlowResult
from homeassistant.const import CONF_PASSWORD, CONF_USERNAME
from homeassistant.core import HomeAssistant
from homeassistant.exceptions import HomeAssistantError

from . import ZhihuifangdongApi
from .const import DOMAIN

_LOGGER = logging.getLogger(__name__)

# only ask username/password (no host)
STEP_USER_DATA_SCHEMA = vol.Schema(
    {
        vol.Required(CONF_USERNAME): str,
        vol.Required(CONF_PASSWORD): str,
    }
)


async def validate_input(hass: HomeAssistant, data: dict[str, Any]) -> dict[str, Any]:
    """Validate the user input allows us to connect.

    Attempt to log in to the Zhihuifangdong API using provided credentials.
    """
    username = data[CONF_USERNAME]
    password = data[CONF_PASSWORD]

    _LOGGER.info("instantiating ZhihuifangdongApi for user %s", username)
    api = ZhihuifangdongApi(hass, username, password)

    _LOGGER.info("trying to login in")
    try:
        await api.async_login()
        _LOGGER.info("validate_input: login successful for %s", username)
    except Exception as err:
        # Map specific integration exceptions to flow errors
        from homeassistant.config_entries import ConfigEntryAuthFailed, ConfigEntryNotReady

        if isinstance(err, ConfigEntryAuthFailed):
            raise InvalidAuth from err
        if isinstance(err, ConfigEntryNotReady):
            raise CannotConnect from err
        _LOGGER.exception("Unexpected exception validating Zhihuifangdong credentials")
        raise CannotConnect from err

    # return data used to create the entry (title will be generated by flow)
    return {"title": username}


class ConfigFlow(ConfigFlow, domain=DOMAIN):
    """Handle a config flow for Zhihuifangdong Apartment."""

    VERSION = 1
    MINOR_VERSION = 1
    _LOGGER.info("running Zhihuifangdong config flow")
    async def async_step_user(
        self, user_input: dict[str, Any] | None = None
    ) -> ConfigFlowResult:
        """Handle the initial step."""
        errors: dict[str, str] = {}
        if user_input is not None:
            try:
                info = await validate_input(self.hass, user_input)
            except CannotConnect:
                errors["base"] = "cannot_connect"
            except InvalidAuth:
                errors["base"] = "invalid_auth"
            except Exception:
                _LOGGER.exception("Unexpected exception in config flow")
                errors["base"] = "unknown"
            else:
                # use username as unique id to prevent duplicates
                await self.async_set_unique_id(user_input[CONF_USERNAME])
                self._abort_if_unique_id_configured()
                title = info.get("title") or user_input[CONF_USERNAME]
                # Store only username/password in the entry data
                data = {CONF_USERNAME: user_input[CONF_USERNAME], CONF_PASSWORD: user_input[CONF_PASSWORD]}
                return self.async_create_entry(title=title, data=data)

        return self.async_show_form(step_id="user", data_schema=STEP_USER_DATA_SCHEMA, errors=errors)


class CannotConnect(HomeAssistantError):
    """Error to indicate we cannot connect."""


class InvalidAuth(HomeAssistantError):
    """Error to indicate there is invalid auth."""